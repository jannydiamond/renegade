{"version":3,"sources":["components/Hexagon/index.tsx","components/Text/index.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Hexagon","styled","ReactHexagon","props","color","blocked","Text","ReactText","App","useState","placedServer","setPlacedServer","serverColor","setServerColor","hexagons","setHexagons","purple","red","blue","yellow","green","servers","setServers","initialState","GridGenerator","hexagon","map","hex","index","id","placeServer","type","hexNeighbors","top","find","h","r","s","topRight","q","bottomRight","bottom","bottomLeft","topLeft","getNeighbors","serverNeighbors","text","getServerNeighbors","hexagonsWithoutHexAndNeightbors","filter","neighbor","newHex","newNeighbors","newState","useEffect","resetBoard","removeServer","filteredPlacedServers","server","serverIds","updatedHexagones","includes","className","onClick","disabled","width","height","viewBox","size","x","y","spacing","i","console","log","alert","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0f0db71.chunk.js","sourcesContent":["import styled from 'styled-components/macro'\nimport { Hexagon as ReactHexagon } from 'react-hexgrid'\n\ntype Props = {\n  color?: string\n  blocked?: boolean\n}\n\nconst Hexagon = styled(ReactHexagon)<Props>`\n  .hexagon {\n    stroke: ${(props) => (props.color ? props.color : 'transparent')};\n    fill: transparent;\n    cursor: ${(props) => (props.blocked ? 'default' : 'pointer')};\n\n    &:hover {\n      fill: ${(props) => (props.blocked ? 'transparent' : '#efefef')};\n    }\n  }\n`\n\nexport default Hexagon\n","import styled from 'styled-components/macro'\nimport { Text as ReactText } from 'react-hexgrid'\n\ntype Props = {\n  color?: string\n}\n\nconst Text = styled(ReactText)<Props>`\n  stroke: none;\n  fill: ${(props) => (props.color ? props.color : 'black')};\n  font-size: 4px;\n  user-select: none;\n`\n\nexport default Text\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\n\nimport { GridGenerator, HexGrid, Layout } from 'react-hexgrid'\n\nimport Hexagon from 'components/Hexagon'\nimport Text from 'components/Text'\n\ntype HexagonBase = {\n  q: number\n  r: number\n  s: number\n}\n\ntype HexagonType = HexagonBase & {\n  id: string\n  color?: string\n  text?: string\n  blocked: boolean\n}\n\ntype ServerType = 'red' | 'blue' | 'green' | 'yellow' | 'purple'\n\ntype Neighbors = {\n  top: HexagonType | undefined\n  topRight: HexagonType | undefined\n  bottomRight: HexagonType | undefined\n  bottom: HexagonType | undefined\n  bottomLeft: HexagonType | undefined\n  topLeft: HexagonType | undefined\n}\n\nconst getNeighbors = (hexagons: HexagonType[], hex: HexagonBase): Neighbors => {\n  const neightborTop = hexagons.find(\n    (h: HexagonType) => h.r === hex.r - 1 && h.s === hex.s + 1\n  )\n  const neightborTopRight = hexagons.find(\n    (h: HexagonType) => h.q === hex.q + 1 && h.r === hex.r - 1\n  )\n  const neightborBottomRight = hexagons.find(\n    (h: HexagonType) => h.q === hex.q + 1 && h.s === hex.s - 1\n  )\n  const neightborBottom = hexagons.find(\n    (h: HexagonType) => h.r === hex.r + 1 && h.s === hex.s - 1\n  )\n  const neightborBottomLeft = hexagons.find(\n    (h: HexagonType) => h.q === hex.q - 1 && h.r === hex.r + 1\n  )\n  const neightborTopLeft = hexagons.find(\n    (h: HexagonType) => h.q === hex.q - 1 && h.s === hex.s + 1\n  )\n\n  return {\n    top: neightborTop,\n    topRight: neightborTopRight,\n    bottomRight: neightborBottomRight,\n    bottom: neightborBottom,\n    bottomLeft: neightborBottomLeft,\n    topLeft: neightborTopLeft,\n  }\n}\n\nconst getServerNeighbors = (type: ServerType, hexNeighbors: Neighbors) => {\n  switch (type) {\n    case 'yellow':\n      return [\n        { ...hexNeighbors.bottom, text: '5' },\n        { ...hexNeighbors.bottomLeft, text: '4' },\n        { ...hexNeighbors.topLeft, text: '3' },\n        { ...hexNeighbors.top, text: '2' },\n        { ...hexNeighbors.topRight, text: '1' },\n      ]\n    case 'red':\n      return [\n        { ...hexNeighbors.top, text: '5' },\n        { ...hexNeighbors.topRight, text: '4' },\n        { ...hexNeighbors.bottomRight, text: '3' },\n        { ...hexNeighbors.bottom, text: '2' },\n        { ...hexNeighbors.bottomLeft, text: '1' },\n      ]\n    case 'purple':\n      return [\n        { ...hexNeighbors.topRight, text: '5' },\n        { ...hexNeighbors.bottomRight, text: '4' },\n        { ...hexNeighbors.bottom, text: '3' },\n        { ...hexNeighbors.bottomLeft, text: '2' },\n        { ...hexNeighbors.topLeft, text: '1' },\n      ]\n    case 'green':\n      return [\n        { ...hexNeighbors.topLeft, text: '5' },\n        { ...hexNeighbors.top, text: '4' },\n        { ...hexNeighbors.topRight, text: '3' },\n        { ...hexNeighbors.bottomRight, text: '2' },\n        { ...hexNeighbors.bottom, text: '1' },\n      ]\n    default:\n      return [\n        { ...hexNeighbors.bottomLeft, text: '5' },\n        { ...hexNeighbors.topLeft, text: '4' },\n        { ...hexNeighbors.top, text: '3' },\n        { ...hexNeighbors.topRight, text: '2' },\n        { ...hexNeighbors.bottomRight, text: '1' },\n      ]\n  }\n}\n\nconst App = () => {\n  const [placedServer, setPlacedServer] = useState<ServerType[]>([])\n  const [serverColor, setServerColor] = useState<ServerType>('blue')\n  const [hexagons, setHexagons] = useState<HexagonType[]>([])\n  const [servers, setServers] = useState<any>({\n    purple: [],\n    red: [],\n    blue: [],\n    yellow: [],\n    green: [],\n  })\n\n  const initialState: HexagonType[] = GridGenerator.hexagon(10).map(\n    (hex: HexagonBase, index: number) => {\n      return {\n        ...hex,\n        id: `hex-${index}`,\n        blocked: false,\n      }\n    }\n  )\n\n  const placeServer = (type: ServerType, hex: HexagonType) => {\n    const hexNeighbors = getNeighbors(hexagons, hex)\n\n    const serverNeighbors = getServerNeighbors(type, hexNeighbors)\n\n    const hexagonsWithoutHexAndNeightbors = hexagons.filter(\n      (h: HexagonType) =>\n        h.id !== hex.id &&\n        !serverNeighbors.find(\n          (neighbor: any) => neighbor && neighbor.id === h.id\n        )\n    )\n\n    const newHex = {\n      ...hex,\n      text: '6',\n      color: type,\n      blocked: true,\n    }\n\n    const newNeighbors = serverNeighbors.map((hex: any) => {\n      return {\n        ...hex,\n        color: type,\n        blocked: true,\n      }\n    })\n\n    const newState = [\n      ...hexagonsWithoutHexAndNeightbors,\n      newHex,\n      ...newNeighbors,\n    ]\n\n    setHexagons(newState)\n    setPlacedServer([...placedServer, type])\n    setServers({\n      ...servers,\n      [type]: [newHex, ...newNeighbors],\n    })\n  }\n\n  useEffect(() => {\n    resetBoard()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const resetBoard = () => {\n    setHexagons(initialState)\n    setPlacedServer([])\n    setServerColor('blue')\n  }\n\n  const removeServer = (type: ServerType) => {\n    const filteredPlacedServers = placedServer.filter(\n      (server: ServerType) => server !== type\n    )\n    setPlacedServer(filteredPlacedServers)\n\n    const serverIds: string[] = servers[type].map((server: any) => server.id)\n\n    const updatedHexagones = hexagons.map((hexagon: HexagonType) => {\n      if (serverIds.includes(hexagon.id)) {\n        return {\n          id: hexagon.id,\n          q: hexagon.q,\n          r: hexagon.r,\n          s: hexagon.s,\n          blocked: !hexagon.blocked,\n        }\n      }\n\n      return hexagon\n    })\n\n    setHexagons(updatedHexagones)\n  }\n\n  const handleClick = (hex: any) => {\n    console.log(servers)\n\n    hex.blocked\n      ? alert('cant place here')\n      : placedServer.includes(serverColor)\n      ? alert('server already placed')\n      : placeServer(serverColor, hex)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-server-buttons\">\n        <button\n          className={serverColor === 'blue' ? 'active' : ''}\n          onClick={() => setServerColor('blue')}\n          disabled={placedServer.includes('blue')}\n        >\n          Set blue Server\n        </button>\n        <button\n          className={serverColor === 'red' ? 'active' : ''}\n          onClick={() => setServerColor('red')}\n          disabled={placedServer.includes('red')}\n        >\n          Set red Server\n        </button>\n        <button\n          className={serverColor === 'green' ? 'active' : ''}\n          onClick={() => setServerColor('green')}\n          disabled={placedServer.includes('green')}\n        >\n          Set green Server\n        </button>\n        <button\n          className={serverColor === 'purple' ? 'active' : ''}\n          onClick={() => setServerColor('purple')}\n          disabled={placedServer.includes('purple')}\n        >\n          Set purple Server\n        </button>\n        <button\n          className={serverColor === 'yellow' ? 'active' : ''}\n          onClick={() => setServerColor('yellow')}\n          disabled={placedServer.includes('yellow')}\n        >\n          Set yellow Server\n        </button>\n        <br />\n        <button onClick={resetBoard}>Reset board</button>\n      </div>\n      <div className=\"App-server-buttons\">\n        <button\n          onClick={() => removeServer('blue')}\n          disabled={!placedServer.includes('blue')}\n        >\n          Remove blue Server\n        </button>\n        <button\n          onClick={() => removeServer('red')}\n          disabled={!placedServer.includes('red')}\n        >\n          Remove red Server\n        </button>\n        <button\n          onClick={() => removeServer('green')}\n          disabled={!placedServer.includes('green')}\n        >\n          Remove green Server\n        </button>\n        <button\n          onClick={() => removeServer('purple')}\n          disabled={!placedServer.includes('purple')}\n        >\n          Remove purple Server\n        </button>\n        <button\n          onClick={() => removeServer('yellow')}\n          disabled={!placedServer.includes('yellow')}\n        >\n          Remove yellow Server\n        </button>\n      </div>\n      <HexGrid width={1200} height={1200} viewBox=\"-200 -200 400 400\">\n        <Layout size={{ x: 10, y: 10 }} spacing={1}>\n          {hexagons.map((hex: any, i: number) => (\n            <Hexagon\n              key={i}\n              q={hex.q}\n              r={hex.r}\n              s={hex.s}\n              blocked={hex.blocked}\n              color={hex.color ? hex.color : '#dadada'}\n              onClick={() => handleClick(hex)}\n            >\n              <Text color={hex.color ? hex.color : '#dadada'}>\n                {hex.text ? hex.text : `${hex.q}, ${hex.r}, ${hex.s}`}\n              </Text>\n            </Hexagon>\n          ))}\n        </Layout>\n      </HexGrid>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}