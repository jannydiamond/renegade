{"version":3,"sources":["Redux/Store/Network/Board/index.ts","reportWebVitals.ts","Redux/Store/Network/Server/index.ts","Redux/Store/Network/index.ts","Redux/Store/index.ts","components/Hexagon/index.tsx","components/Text/index.tsx","App/index.tsx","helpers/index.ts","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","hexagons","GridGenerator","hexagon","map","hex","index","id","blocked","hexagonSchema","schema","Entity","hexagonListSchema","Array","normalizedHexagons","normalize","initialState","byId","entities","allIds","result","actions","noOp","createAction","setHexagons","SET_HEXAGONS","resetHexagons","RESET_HEXAGONS","getBoardState","state","Network","Board","selectors","getBoardHexagons","createSelector","getHexagonArray","Object","values","getHexagonIds","server","placedServer","availableServer","addServer","type","hexagonIds","ADD_SERVER","removeServer","REMOVE_SERVER","resetServer","RESET_SERVER","getServerState","Server","getServer","getPlacedServer","getAvailableServer","Reducer","combineReducers","action","normalizedData","payload","newState","filteredPlacedServers","filter","RootReducer","reduceReducers","Hexagon","styled","ReactHexagon","props","color","Text","ReactText","mapDispatchToProps","App","useState","serverColor","setServerColor","placeServer","hexNeighbors","top","find","h","r","s","topRight","q","bottomRight","bottom","bottomLeft","topLeft","getNeighbors","serverNeighbors","text","getServerNeighbors","serverNeighborsIds","hexagonsWithoutHexAndNeightbors","neighbor","newHex","newNeighbors","useEffect","resetBoard","handleRemoveServer","updatedHexagones","includes","className","onClick","disabled","width","height","viewBox","size","x","y","spacing","i","alert","handleClick","connect","React","memo","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36c2df05.chunk.js","sourcesContent":["import { GridGenerator } from 'react-hexgrid'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { normalize, schema } from 'normalizr'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type HexagonState = {\n  byId: types.HexagonTiles\n  allIds: string[] | any\n}\n\nexport type State = {\n  hexagons: HexagonState\n}\n\nconst hexagons: types.HexagonTile[] = GridGenerator.hexagon(10).map(\n  (hex: types.HexagonBase, index: number) => {\n    return {\n      ...hex,\n      id: `hex-${index}`,\n      blocked: false,\n    }\n  }\n)\n\nconst hexagonSchema = new schema.Entity('hexagons');\nconst hexagonListSchema = new schema.Array(hexagonSchema);\nconst normalizedHexagons = normalize(hexagons, hexagonListSchema)\n\nexport const initialState: State = {\n  hexagons: {\n    byId: {\n      ...normalizedHexagons.entities.hexagons as types.HexagonTiles\n    },\n    allIds: normalizedHexagons.result\n  }\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_HEXAGONS = 'Network/Board/SET_HEXAGONS',\n  RESET_HEXAGONS = 'Network/Board/RESET_HEXAGONS',\n}\n\nexport const actions = {\n  noOp: () => createAction('@@REDUX_LOOP/ENFORCE_DEFAULT_HANDLING'),\n  setHexagons: (hexagons: types.HexagonTile[]) =>\n    createAction(ActionTypes.SET_HEXAGONS, hexagons),\n  resetHexagons: () => createAction(ActionTypes.RESET_HEXAGONS),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_HEXAGONS: {\n      const normalizedData = normalize(action.payload, hexagonListSchema);\n\n      return {\n        hexagons: {\n          byId: {\n            ...normalizedData.entities.hexagons as types.HexagonTiles\n          },\n          allIds: normalizedData.result\n        }\n      }\n    }\n\n    case ActionTypes.RESET_HEXAGONS: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BoardStateSlice = {\n  Network: {\n    Board: State\n  }\n}\n\nconst getBoardState = (state: BoardStateSlice) => state.Network.Board\n\nconst getBoardHexagons = createSelector([getBoardState], ({hexagons}: State) => hexagons)\n\nconst getHexagonArray = createSelector([getBoardState], ({hexagons}: State) => Object.values(hexagons.byId))\n\nconst getHexagonIds = createSelector([getBoardState], ({hexagons}: State) => hexagons.allIds)\n\nexport const selectors = {\n  getBoardState,\n  getBoardHexagons,\n  getHexagonArray,\n  getHexagonIds\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { createSelector } from 'reselect'\nimport { LoopReducer } from 'redux-loop'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  server: {\n    [id: string]: string[]\n  }\n  placedServer: types.ServerType[]\n  availableServer: types.ServerType[]\n}\nexport const initialState: State = {\n  server: {},\n  placedServer: [],\n  availableServer: ['blue', 'green', 'purple', 'red', 'yellow']\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  ADD_SERVER = 'Network/Server/ADD_SERVER',\n  REMOVE_SERVER = 'Network/Server/REMOVE_SERVER',\n  RESET_SERVER = 'Network/Server/RESET_SERVER',\n}\n\nexport const actions = {\n  noOp: () => createAction('@@REDUX_LOOP/ENFORCE_DEFAULT_HANDLING'),\n  addServer: (type: types.ServerType, hexagonIds: string[]) =>\n    createAction(ActionTypes.ADD_SERVER, {\n      type,\n      hexagonIds\n    }),\n  removeServer: (type: types.ServerType) =>\n    createAction(ActionTypes.REMOVE_SERVER, type),\n  resetServer: () => createAction(ActionTypes.RESET_SERVER),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.ADD_SERVER: {\n      const { type, hexagonIds } = action.payload\n\n      const newState = {\n        ...state,\n        server: {\n          ...state.server,\n          [type]: hexagonIds\n        },\n        placedServer: [...state.placedServer, type]\n      }\n\n      return newState\n    }\n\n    case ActionTypes.REMOVE_SERVER: {\n      const filteredPlacedServers = state.placedServer.filter(\n        (server: types.ServerType) => server !== action.payload\n      )\n\n      const newState = {\n        ...state,\n        server: {\n          ...state.server,\n          [action.payload]: []\n        },\n        placedServer: filteredPlacedServers\n      }\n\n      return newState\n    }\n\n    case ActionTypes.RESET_SERVER: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type ServerStateSlice = {\n  Network: {\n    Server: State\n  }\n}\n\nconst getServerState = (state: ServerStateSlice) => state.Network.Server\n\nconst getServer = createSelector([getServerState], ({server}: State) => server)\nconst getPlacedServer = createSelector([getServerState], ({placedServer}: State) => placedServer)\nconst getAvailableServer = createSelector([getServerState], ({availableServer}: State) => availableServer)\n\nexport const selectors = {\n  getServerState,\n  getServer,\n  getPlacedServer,\n  getAvailableServer,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Board from './Board'\nimport * as Server from './Server'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Board: Board.State\n  Server: Server.State\n}\n\nexport const initialState = {\n  Board: Board.initialState,\n  Server: Server.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Board: Board.actions,\n  Server: Server.actions,\n}\n\nexport type Action =\n  | Board.Action\n  | Server.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Board: Board.Reducer,\n  Server: Server.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Board: Board.selectors,\n  Server: Server.selectors,\n}\n","\nimport { combineReducers, reduceReducers } from 'redux-loop'\n\nimport * as Network from 'Redux/Store/Network'\n\nexport type RootState = {\n  Network: Network.State\n}\n\nexport const initialState = {\n  Network: Network.initialState\n}\n\nexport const actions = {\n  Network: Network.actions,\n}\n\nexport type RootAction =\n  | Network.Action\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    Network: Network.Reducer,\n  })\n)\n\nexport const selectors = {\n  Network: Network.selectors\n}\n","import styled from 'styled-components/macro'\nimport { Hexagon as ReactHexagon } from 'react-hexgrid'\n\ntype Props = {\n  color?: string\n  blocked?: boolean\n}\n\nconst Hexagon = styled(ReactHexagon)<Props>`\n  .hexagon {\n    stroke: ${(props) => (props.color ? props.color : 'transparent')};\n    fill: transparent;\n    cursor: ${(props) => (props.blocked ? 'default' : 'pointer')};\n\n    &:hover {\n      fill: ${(props) => (props.blocked ? 'transparent' : '#efefef')};\n    }\n  }\n`\n\nexport default Hexagon\n","import styled from 'styled-components/macro'\nimport { Text as ReactText } from 'react-hexgrid'\n\ntype Props = {\n  color?: string\n}\n\nconst Text = styled(ReactText)<Props>`\n  stroke: none;\n  fill: ${(props) => (props.color ? props.color : 'black')};\n  font-size: 4px;\n  user-select: none;\n`\n\nexport default Text\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { HexGrid, Layout } from 'react-hexgrid'\n\nimport * as types from 'types'\n\nimport { getNeighbors, getServerNeighbors } from 'helpers'\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport './App.css'\n\nimport Hexagon from 'components/Hexagon'\nimport Text from 'components/Text'\n\nconst mapStateToProps = (state: RootState) => ({\n  hexagons: selectors.Network.Board.getHexagonArray(state),\n  server: selectors.Network.Server.getServer(state),\n  placedServer: selectors.Network.Server.getPlacedServer(state),\n})\n\nconst mapDispatchToProps = {\n  setHexagons: actions.Network.Board.setHexagons,\n  resetHexagons: actions.Network.Board.resetHexagons,\n  addServer: actions.Network.Server.addServer,\n  removeServer: actions.Network.Server.removeServer,\n  resetServer: actions.Network.Server.resetServer,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst App = ({\n  hexagons,\n  server,\n  placedServer,\n  setHexagons,\n  resetHexagons,\n  addServer,\n  removeServer,\n  resetServer,\n}: Props) => {\n  const [serverColor, setServerColor] = useState<types.ServerType>('blue')\n\n  const placeServer = (type: types.ServerType, hex: types.HexagonTile) => {\n    const hexNeighbors = getNeighbors(hexagons, hex)\n\n    const serverNeighbors = getServerNeighbors(type, hexNeighbors)\n    const serverNeighborsIds = serverNeighbors.map((server: any) => server.id)\n\n    const hexagonsWithoutHexAndNeightbors = hexagons.filter(\n      (h: types.HexagonTile) =>\n        h.id !== hex.id &&\n        !serverNeighbors.find(\n          (neighbor: any) => neighbor && neighbor.id === h.id\n        )\n    )\n\n    const newHex = {\n      ...hex,\n      text: '6',\n      color: type,\n      blocked: true,\n    }\n\n    const newNeighbors = serverNeighbors.map((hex: any) => {\n      return {\n        ...hex,\n        color: type,\n        blocked: true,\n      }\n    })\n\n    const newState = [\n      ...hexagonsWithoutHexAndNeightbors,\n      newHex,\n      ...newNeighbors,\n    ]\n\n    setHexagons(newState)\n    addServer(type, [newHex.id, ...serverNeighborsIds])\n  }\n\n  useEffect(() => {\n    resetBoard()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const resetBoard = () => {\n    resetHexagons()\n    resetServer()\n    setServerColor('blue')\n  }\n\n  const handleRemoveServer = (type: types.ServerType) => {\n    const updatedHexagones = hexagons.map((hexagon: types.HexagonTile) => {\n      if (server[type].includes(hexagon.id)) {\n        return {\n          id: hexagon.id,\n          q: hexagon.q,\n          r: hexagon.r,\n          s: hexagon.s,\n          blocked: !hexagon.blocked,\n        }\n      }\n\n      return hexagon\n    })\n\n    removeServer(type)\n    setHexagons(updatedHexagones)\n  }\n\n  const handleClick = (hex: any) => {\n    hex.blocked\n      ? alert('cant place here')\n      : placedServer.includes(serverColor)\n      ? alert('server already placed')\n      : placeServer(serverColor, hex)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-server-buttons\">\n        <button\n          className={serverColor === 'blue' ? 'active' : ''}\n          onClick={() => setServerColor('blue')}\n          disabled={placedServer.includes('blue')}\n        >\n          Set blue Server\n        </button>\n        <button\n          className={serverColor === 'red' ? 'active' : ''}\n          onClick={() => setServerColor('red')}\n          disabled={placedServer.includes('red')}\n        >\n          Set red Server\n        </button>\n        <button\n          className={serverColor === 'green' ? 'active' : ''}\n          onClick={() => setServerColor('green')}\n          disabled={placedServer.includes('green')}\n        >\n          Set green Server\n        </button>\n        <button\n          className={serverColor === 'purple' ? 'active' : ''}\n          onClick={() => setServerColor('purple')}\n          disabled={placedServer.includes('purple')}\n        >\n          Set purple Server\n        </button>\n        <button\n          className={serverColor === 'yellow' ? 'active' : ''}\n          onClick={() => setServerColor('yellow')}\n          disabled={placedServer.includes('yellow')}\n        >\n          Set yellow Server\n        </button>\n        <br />\n        <button onClick={resetBoard}>Reset board</button>\n      </div>\n      <div className=\"App-server-buttons\">\n        <button\n          onClick={() => handleRemoveServer('blue')}\n          disabled={!placedServer.includes('blue')}\n        >\n          Remove blue Server\n        </button>\n        <button\n          onClick={() => handleRemoveServer('red')}\n          disabled={!placedServer.includes('red')}\n        >\n          Remove red Server\n        </button>\n        <button\n          onClick={() => handleRemoveServer('green')}\n          disabled={!placedServer.includes('green')}\n        >\n          Remove green Server\n        </button>\n        <button\n          onClick={() => handleRemoveServer('purple')}\n          disabled={!placedServer.includes('purple')}\n        >\n          Remove purple Server\n        </button>\n        <button\n          onClick={() => handleRemoveServer('yellow')}\n          disabled={!placedServer.includes('yellow')}\n        >\n          Remove yellow Server\n        </button>\n      </div>\n      <HexGrid width={1200} height={1200} viewBox=\"-200 -200 400 400\">\n        <Layout size={{ x: 10, y: 10 }} spacing={1}>\n          {hexagons.map((hex: any, i: number) => (\n            <Hexagon\n              key={i}\n              q={hex.q}\n              r={hex.r}\n              s={hex.s}\n              blocked={hex.blocked}\n              color={hex.color ? hex.color : '#dadada'}\n              onClick={() => handleClick(hex)}\n            >\n              <Text color={hex.color ? hex.color : '#dadada'}>\n                {hex.text ? hex.text : `${hex.q}, ${hex.r}, ${hex.s}`}\n              </Text>\n            </Hexagon>\n          ))}\n        </Layout>\n      </HexGrid>\n    </div>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(App))\n","import * as types from 'types'\n\nexport const getNeighbors = (\n  hexagons: types.HexagonTile[],\n  hex: types.HexagonBase\n): types.Neighbors => {\n  const neightborTop = hexagons.find(\n    (h: types.HexagonTile) => h.r === hex.r - 1 && h.s === hex.s + 1\n  )\n  const neightborTopRight = hexagons.find(\n    (h: types.HexagonTile) => h.q === hex.q + 1 && h.r === hex.r - 1\n  )\n  const neightborBottomRight = hexagons.find(\n    (h: types.HexagonTile) => h.q === hex.q + 1 && h.s === hex.s - 1\n  )\n  const neightborBottom = hexagons.find(\n    (h: types.HexagonTile) => h.r === hex.r + 1 && h.s === hex.s - 1\n  )\n  const neightborBottomLeft = hexagons.find(\n    (h: types.HexagonTile) => h.q === hex.q - 1 && h.r === hex.r + 1\n  )\n  const neightborTopLeft = hexagons.find(\n    (h: types.HexagonTile) => h.q === hex.q - 1 && h.s === hex.s + 1\n  )\n\n  return {\n    top: neightborTop,\n    topRight: neightborTopRight,\n    bottomRight: neightborBottomRight,\n    bottom: neightborBottom,\n    bottomLeft: neightborBottomLeft,\n    topLeft: neightborTopLeft,\n  }\n}\n\nexport const getServerNeighbors = (\n  type: types.ServerType,\n  hexNeighbors: types.Neighbors\n) => {\n  switch (type) {\n    case 'yellow':\n      return [\n        { ...hexNeighbors.bottom, text: '5' },\n        { ...hexNeighbors.bottomLeft, text: '4' },\n        { ...hexNeighbors.topLeft, text: '3' },\n        { ...hexNeighbors.top, text: '2' },\n        { ...hexNeighbors.topRight, text: '1' },\n      ]\n    case 'red':\n      return [\n        { ...hexNeighbors.top, text: '5' },\n        { ...hexNeighbors.topRight, text: '4' },\n        { ...hexNeighbors.bottomRight, text: '3' },\n        { ...hexNeighbors.bottom, text: '2' },\n        { ...hexNeighbors.bottomLeft, text: '1' },\n      ]\n    case 'purple':\n      return [\n        { ...hexNeighbors.topRight, text: '5' },\n        { ...hexNeighbors.bottomRight, text: '4' },\n        { ...hexNeighbors.bottom, text: '3' },\n        { ...hexNeighbors.bottomLeft, text: '2' },\n        { ...hexNeighbors.topLeft, text: '1' },\n      ]\n    case 'green':\n      return [\n        { ...hexNeighbors.topLeft, text: '5' },\n        { ...hexNeighbors.top, text: '4' },\n        { ...hexNeighbors.topRight, text: '3' },\n        { ...hexNeighbors.bottomRight, text: '2' },\n        { ...hexNeighbors.bottom, text: '1' },\n      ]\n    default:\n      return [\n        { ...hexNeighbors.bottomLeft, text: '5' },\n        { ...hexNeighbors.topLeft, text: '4' },\n        { ...hexNeighbors.top, text: '3' },\n        { ...hexNeighbors.topRight, text: '2' },\n        { ...hexNeighbors.bottomRight, text: '1' },\n      ]\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport reportWebVitals from './reportWebVitals'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport './index.css'\nimport App from './App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 })\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}